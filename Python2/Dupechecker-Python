#!/usr/bin/python2.7
# dupechecker
# Finds duplicate files based on md5 and filesize
# Created by LAMMJohnson for the gentoomen 4chantoolbox project

import sys, getopt, os, hashlib

## Defaults
recursive   = False       #defaults to not recursive
directory   = "./"        #default is current dir
ask         = True        #defaults to requiring confirmation

# All important list of files
filestats   = []

class fileblock():
    def __init__(self, inpath):
        self.wholepath = inpath
        self.size = pretty_size( os.path.getsize(inpath) )
        self.md5 = ""

    def get_md5(self):
        print "Generating md5 for " + self.wholepath
        self.md5 = md5_for_file(self.wholepath)

def add_dir(dirpath):
    print "Scanning directory " + dirpath
    for tempfile in os.listdir(dirpath):
        if os.path.isdir(dirpath + tempfile) and recursive:
            add_dir(dirpath + tempfile + "/")
        elif os.path.isfile(dirpath + tempfile):
            filestats.append( fileblock( dirpath + tempfile ) )

def md5_for_file(filename, block_size=2**20):
    f = open(filename)
    md5 = hashlib.md5()
    while True:
        data = f.read(block_size)
        if not data:
            break
        md5.update(data)
    return md5.digest()

def pretty_size(size):
    suffixes = [("B",2**10), ("K",2**20), ("M",2**30), ("G",2**40), ("T",2**50)]
    for suf, lim in suffixes:
        if size > lim:
            continue
        else:
            return round(size/float(lim/2**10),2).__str__()+suf

def usage():
    print "======================================================"
    print "Usage: Dupechecker-Python [OPTION] <directory>"
    print "Script to remove duplicate files"
    print " "
    print " -r/--recursive    recurse through directories"
    print " -y/--yes-to-all   remove duplicates without prompting"
    print " -h/--help         this help text"
    print "======================================================"
    sys.exit(' ')

## Rip out any genuine paths in the args
for arg in sys.argv:
    if os.path.isdir(arg):
        directory = arg

## Handle Args
try:
    opts, args = getopt.gnu_getopt( sys.argv, "hry", ["help", "recursive", "yes-to-all"] )

except getopt.GetoptError:
    print str(err)
    usage()

for o, a in opts:
    if o in ("-r", "--recursive"):
        recursive = True
    elif o in ("-y", "--yes-to-all"):
        ask = False
    elif o in ("-h", "--help"):
        usage()

# Spit out a warnign if we're using the current dir
if directory == "./":
    print "No valid directory given. Using current directory."

## Main part
#Get a list of files only (no dirs)
add_dir(directory)

# The real meat of it -- compare listed files.
for i in range(len(filestats)):
    startfile = filestats[i]

    for e in range(i + 1, len(filestats)):
        checkagainst = filestats[e]

        if startfile.size == checkagainst.size:

            print "========================================="
            print "File: " + startfile.wholepath
            print "Matches: " + checkagainst.wholepath
            print "Size: " + str(startfile.size)

            # Generate md5s if necessary
            if startfile.md5 == "":
                startfile.get_md5()
            if checkagainst.md5 == "":
                checkagainst.get_md5()

            if startfile.md5 == checkagainst.md5:
                print "Match found! Would you like to delete duplicate file " + startfile.wholepath + ""
    
                # Allowance for the automatic overwrite flag
                if not ask:
                    choice = "y"
                else:
                    choice = ""

                # get user input to determine if it's deleteion time or not
                while not choice == 'y' and not choice == 'n':
                    choice = raw_input('y/n? ')

                # In instructed to, delete the file    
                if choice == 'y':
                    os.remove(startfile.wholepath)
                    print startfile.wholepath + " deleted."

                break

            else:
                print "No md5 match."
